package com.example.Toppan.Toppan.ServiceImpl;

import java.awt.print.Pageable;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.example.Toppan.Toppan.Model.Employee;
import com.example.Toppan.Toppan.Repository.EmployeeRepository;
import com.example.Toppan.Toppan.Service.EmployeeService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class EmployeeServiceImpl implements EmployeeService {

	@Autowired
	private EmployeeRepository employeeRepository;

	private String line = "";

	private String filepath = "C:/Users/65901/Desktop/LAPTOP/Toppan/";

	@Override
	public void upload(MultipartFile mFile) {

		try {
			BufferedReader br = new BufferedReader(new FileReader(filepath + mFile.getOriginalFilename()));
			while ((line = br.readLine()) != null) {

				String[] data = line.split(",");

				Optional<Employee> Employee = employeeRepository.findByIdAndLogin(data[0], data[1]);
				if (!Employee.isPresent() && Double.valueOf(data[3]) > 0 && !data[0].contains("#")) {
					Employee employee = new Employee();
					employee.setId(data[0]);
					employee.setLogin(data[1]);
					employee.setName(data[2]);
					employee.setSalary(Double.valueOf(data[3]));
					employeeRepository.save(employee);
				} else if (Employee.isPresent() && Double.valueOf(data[3]) > 0 && !data[0].contains("#")) {
					Employee.get().setLogin(data[1]);
					Employee.get().setName(data[2]);
					Employee.get().setSalary(Double.valueOf(data[3]));
					employeeRepository.save(Employee.get());
				} else {
					log.error("Salary cannot be lower than 0");
				}

			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public List<Employee> getAllEmployees(String field) {
		return employeeRepository.findAll(Sort.by(Sort.Direction.ASC, field));

	}

	@Override
	public List<Employee> getAllEmployeesWithPaginaation(int minSalary, int maxSalary, int offset, int pageSize,
			String field) {
		
		log.info(field);
		
		if(field.startsWith("+")) {
			System.out.println("Positive");
		} else if (field.startsWith("-")) {
			System.out.println("negative");
		} else {
			System.out.println("nothing");
		}

		PageRequest paging = PageRequest.of(offset, pageSize, field.startsWith("+") ? Sort.by(field.substring(1)).ascending()
				: field.startsWith("-") ? Sort.by(field.substring(1)).descending() : Sort.unsorted());

		Page<Employee> emp = employeeRepository.findAll(paging);

		List<Employee> employee = emp.getContent().stream()
				.filter(e -> e.getSalary() > minSalary && e.getSalary() < maxSalary).collect(Collectors.toList());

		log.info(" emp = {}", emp);

		if (!employee.isEmpty()) {
			return employee;
		} else {
			return new ArrayList<Employee>();
		}

	}

}
